import { notFound } from "next/navigation";
import { Suspense } from "react";
import { getServiceData, getAvailableCities, getCityServices } from "@/lib/data-service";
import TariffExplorer from "@/components/blocks/TariffExplorer";
import CityServiceLayout from "@/components/layout/CityServiceLayout";

export const revalidate = 3600;

function formatServiceName(type: string): string {
  const parts = type
    .toLowerCase()
    .split(/\s*\+\s*/)
    .map((s) => s.trim());

  const hasInternet = parts.some((p) => p.includes("–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"));
  const hasTV = parts.some((p) => p.includes("—Ç–≤"));
  const hasMobile = parts.some((p) => p.includes("–º–æ–±"));

  if (hasInternet && hasTV && hasMobile) {
    return "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –¢–í –∏ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å";
  }
  if (hasInternet && hasTV) {
    return "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ";
  }
  if (hasInternet && hasMobile) {
    return "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å";
  }
  if (hasTV && hasMobile) {
    return "–¢–í –∏ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å";
  }
  if (hasInternet) return "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç";
  if (hasTV) return "–¢–í";
  if (hasMobile) return "–º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å";

  return type; // fallback
}

export async function generateMetadata({ params }: { params: { city: string; service: string } }) {
  const { city, service } = params;
  
  const data = await getServiceData(city, service);

  if (!data) {
    return {
      title: '–¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      description: '–£–∫–∞–∑–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',
    };
  }

  const cityName = data.cityName || city;
  const serviceTitle = data.service.title || service;

  let title = "";
  let description = "";

  if (service === "internet") {
    title = `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName} ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É, —Ç–∞—Ä–∏—Ñ—ã –≤ 2025 –≥–æ–¥—É`;
    description = `–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ 2025 –≥–æ–¥—É. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ ${cityName}. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.`;
  } else if (service === "internet-tv") {
    title = `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç + –¢–í –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName} ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥, —Ç–∞—Ä–∏—Ñ—ã –≤ 2025 –≥–æ–¥—É`;
    description = `–¢–∞—Ä–∏—Ñ—ã –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ –≤ ${cityName}. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —É—Å–ª—É–≥ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ 2025 –≥–æ–¥—É.`;
  } else if (service === "internet-mobile") {
    title = `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç + –º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName} ‚Äî —Ç–∞—Ä–∏—Ñ—ã –≤ 2025 –≥–æ–¥—É`;
    description = `–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å –≤ ${cityName}. –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞.`;
  } else if (service === "internet-tv-mobile") {
    title = `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç + –¢–í + –º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName} ‚Äî —Ç–∞—Ä–∏—Ñ—ã –≤ 2025 –≥–æ–¥—É`;
    description = `–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName}, –≤–∫–ª—é—á–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –¢–í –∏ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω.`;
  } else {
    // fallback
    title = `–¢–∞—Ä–∏—Ñ—ã –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName}`;
    description = `–¢–∞—Ä–∏—Ñ—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –≤ ${cityName}.`;
  }

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      images: ["https://rtk-telecom.ru/android-icon-192x192.png"],
    },
    alternates: {
      canonical: `https://–≤–∞—à-–¥–æ–º–µ–Ω.—Ä—É/${city}/${service}`,
    },
  };
}

export async function generateStaticParams() {
  try {
    const cities = await getAvailableCities();
    const params = [];
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const limitedCities = cities.slice(0, 50); // –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–µ 50 –≥–æ—Ä–æ–¥–æ–≤
    
    for (const city of limitedCities) {
      const services = await getCityServices(city);
      for (const service of services) {
        params.push({ city, service });
      }
    }
    return params;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", err);
    return [];
  }
}

export default async function ServicePage({ params }: { params: { city: string; service: string } }) {
  const { city, service } = params;

  const data = await getServiceData(city, service);
  if (!data) return notFound();

  const cityName = data.cityName;
  const serviceTitle = formatServiceName(data.service?.tariffs?.[0]?.type || service);
  const tariffs = data.service?.tariffs || [];

  return (
    <CityServiceLayout service={serviceTitle} cityName={cityName} citySlug={city}>
      <Suspense fallback={<div className="flex justify-center items-center min-h-[400px]">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤...</div>}>
        <TariffExplorer
          tariffs={tariffs} // üëà —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
          cityName={cityName}
          service={serviceTitle}
          citySlug={city}
          titleservice={data.service.title || service}
          origservice={service}
        />
      </Suspense>
    </CityServiceLayout>
  );
}